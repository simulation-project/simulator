%%% Copyright (C) 2012 ITI Egypt.
%%%
%%% The contents of this file are subject to the Erlang Public License,
%%% Version 1.1, (the "License"); you may not use this file except in
%%% compliance with the License. You should have received a copy of the
%%% Erlang Public License along with this software. If not, it can be
%%% retrieved via the world wide web at http://www.erlang.org/.
%%%
%%% Software distributed under the License is distributed on an "AS IS"
%%% basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See
%%% the License for the specific language governing rights and limitations
%%% under the License.
%%%
%%% The Initial Developer of the Original Code is Ericsson Utvecklings AB.
%%% Portions created by Ericsson are Copyright 1999, Ericsson Utvecklings
%%% AB. All Rights Reserved.

%%% @doc 
%%%
%%% @copyright 2012 ITI Egypt.
%%% @author Alaa Eldin gamal <alaaeldine1989@yahoo.com>
%%%         [http://www.iti.gov.eg/]
%%% @end
-module(hlr_gen_event).
-behaviour(gen_event).

%%% Include files

%%% Start/Stop exports
-export([start_link/0]).

%%% External exports
-export([register/1,broadcast/1]).

%%% Init/Terminate exports
-export([init/1, terminate/2]).

%%% Handle messages exports
-export([handle_call/2, handle_event/2, handle_info/2]).

%%% Code update exports
-export([code_change/3]).

%%% Macros

%%% Data types
%% @private
%% @type st() = #st{}.
%%
%% Representation of the server's state.
%%
%% <dl>
%%   <dt>: </dt><dd>
%%   </dd>
%% </dl>
-record(st, {}).

%%%-----------------------------------------------------------------------------
%%% Start/Stop exports
%%%-----------------------------------------------------------------------------
%% @spec start_link() -> Result
%%    Result = {ok, Pid} | {error, Error}
%%    Pid = pid()
%%    Error = {already_started, Pid}
%%
%% @doc Starts the server.
%%
%% @see gen_server
%% @see gen_event:start_link/1
%% @end
start_link() ->
    gen_event:start_link({global, ?MODULE}). 

%%%-----------------------------------------------------------------------------
%%% External exports
%%%-----------------------------------------------------------------------------
%% @spec add_handler() -> Result
%%    Result = ok | {'EXIT', Reason} | term()
%%    Reason = term()
%%
%% @doc Adds an event handler.
%% @end
register(Modulename) ->
	  io:format("manger ~p registered ~n",[Modulename]),
    gen_event:add_handler(?MODULE, Modulename, []).



broadcast(Msg)->
    gen_event:notify(?MODULE,Msg).



%%%-----------------------------------------------------------------------------
%%% Init/Terminate exports
%%%-----------------------------------------------------------------------------
%% @private
%% @spec init(Args) -> {ok, St}
%%    Args = term()
%%    St = term()
%%
%% @doc Initialize the event handler.
%% @end
init([]) ->
    {ok, #st{}}.

%% @private
%% @spec terminate(Arg, St) -> ok
%%    Arg = Args | {stop, Reason} | stop | remove_handler |
%%          {error, {'EXIT', Reason}} | {error, Reason}
%%    Reason = term()
%%    St = term()
%%
%% @doc Shutdown the server.
%%
%% The return value is ignored by the server.
%% @end
terminate(_Reason, _St) ->
    ok.

%%%-----------------------------------------------------------------------------
%%% Handle messages exports
%%%-----------------------------------------------------------------------------
%% @private
%% @spec handle_call(Request, St) -> Result
%%    Request = term()
%%    St = term()
%%    Result = {ok, Reply, St} |
%%             {swap_handler, Reply, Args1, NewSt, Hlr2, Args2} |
%%             {remove_handler, Reply}
%%    Reply = term()
%%    NewSt = term()
%%    Args1 = term()
%%    Args2 = term()
%%    Hlr2 = Mod2 | {Mod2, Id}
%%    Mod2 = atom()
%%    Id = term()
%%
%% @doc
%% @end
handle_call(_Req, St) ->
    {ok, ok, St}.

%% @private
%% @spec handle_event(Event, St) -> Result
%%    Event = term()
%%    St = term()
%%    Result = {ok, NewSt} |
%%             {swap_handler, Args1, NewSt, Hlr2, Args2} |
%%             remove_handler 
%%    NewSt = term()
%%    Args1 = term()
%%    Args2 = term()
%%    Hlr2 = Mod2 | {Mod2, Id}
%%    Mod2 = atom()
%%    Id = term()
%%
%% @doc
%% @end
handle_event({hlr,call,HLR_Data}, St) ->
    io:format("handle_event is called ~n"),
    %%HLR_Data = [{hlr_name,"hlr1"}],
	hlr_mgr:start_gen(HLR_Data),
    {ok, St};
handle_event({hlr, printHlrData, Name}, St) ->
    io:format("handle_event is called ~n"),
    hlr_mgr:printHlrData(Name),
    {ok, St};
handle_event({hlr,printRegServers}, St) ->
    io:format("handle_event is called ~n"),
    hlr_mgr:printRegServers(),
    {ok, St}.

%% @private
%% @spec handle_info(Info, St) -> Result
%%    Info = term()
%%    St = term()
%%    Result = {ok, NewSt} |
%%             {swap_handler, Args1, NewSt, Hlr, Args2} |
%%             remove_handler
%%    NewSt = term()
%%    Args1 = term()
%%    Args2 = term()
%%    Hlr2 = Mod2 | {Mod2, Id}
%%    Mod2 = atom()
%%    Id = term()
%%
%% @doc
%% @end
handle_info(_Info, St) ->
    {ok, St}.

%%%-----------------------------------------------------------------------------
%%% Code update exports
%%%-----------------------------------------------------------------------------
%% @private
%% @spec code_change(OldVsn, St, Extra) -> {ok, NewSt}
%%    OldVsn = undefined | term()
%%    St = term()
%%    Extra = term
%%    NewSt = term()
%%
%% @doc Converts the process state when code is changed.
%% @end
code_change(_OldVsn, St, _Extra) ->
    {ok, St}.

%%%-----------------------------------------------------------------------------
%%% Internal functions
%%%-----------------------------------------------------------------------------
call_event(Event)->
    gen_event:notify(?MODULE, Event),
    ok.
